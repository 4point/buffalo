package actions

import (

	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
)

// This file is generated by Buffalo. It offers a basic structure for 
// adding, editing and deleting a page. If your model is more 
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular ({{.model}})
// DB Table: Plural ({{.modelPlural}})
// Resource: Plural ({{.modelPlural}})
// Path: Plural (/{{.varPlural}})
// View Template Folder: Plural (/templates/{{.varPlural}}/)

// {{.modelPlural}}Resource is the resource for the {{.singular}} model
type {{.modelPlural}}Resource struct{
	buffalo.Resource
}

// List gets all {{.modelPlural}}. This function is mapped to the the path 
// GET /{{.underPlural}} 
func (v {{.modelPlural}}Resource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	{{.varPlural}} := &models.{{.modelPlural}}{}
	// You can order your list here. Just change 
	err := tx.All({{.varPlural}})
	// to:
	// err := tx.Order("(case when completed then 1 else 2 end) desc, lower([sort_parameter]) asc").All({{.downFirstCap}})
	// Don't forget to change [sort_parameter] to the parameter of
	// your model, which shuold be used for sorting. 
	if err != nil {
		return err
	}
	// Make {{.plural}} available inside the html template
	c.Set("{{.varPlural}}", {{.varPlural}})
	return c.Render(200, r.HTML("{{.underPlural}}/index.html"))
}

// Show gets the data for one {{.singular}}. This function is mapped to
// the path GET /{{.underPlural}}/{{"{"}}{{.singular}}_id}
func (v {{.modelPlural}}Resource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.singular}}_id is used. 
	err := tx.Find({{.varSingular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	// Make {{.varSingular}} available inside the html template
	c.Set("{{.varSingular}}", {{.varSingular}})
	return c.Render(200, r.HTML("{{.underPlural}}/show.html"))
}

// New renders the formular for creating a new {{.singular}}. 
// This function is mapped to the path GET /{{.underPlural}}/new
func (v {{.modelPlural}}Resource) New(c buffalo.Context) error {
	// Make {{.varSingular}} available inside the html template
	c.Set("{{.varSingular}}", &models.{{.model}}{})
	return c.Render(200, r.HTML("{{.underPlural}}/new.html"))
}

// Create adds a {{.singular}} to the DB. This function is mapped to the 
// path POST /{{.underPlural}}
func (v {{.modelPlural}}Resource) Create(c buffalo.Context) error {
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// Bind {{.varSingular}} to the html form elements
	err := c.Bind({{.varSingular}})
	if err != nil {
		return err
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate({{.varSingular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make {{.varSingular}} available inside the html template
		c.Set("{{.varSingular}}", {{.varSingular}})
		// Make the errors available inside the html template
		c.Set("errors", verrs.Errors)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("{{.underPlural}}/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "{{.model}} was created successfully")
	// and redirect to the {{.underPlural}} index page
	return c.Redirect(301, "/{{.underPlural}}")
}

// Edit renders a edit formular for a {{.singular}}. This function is 
// mapped to the path GET /{{.underPlural}}/{{"{"}}{{.singular}}}/edit
func (v {{.modelPlural}}Resource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	err := tx.Find({{.varSingular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	// Make {{.varSingular}} available inside the html template
	c.Set("{{.varSingular}}", {{.varSingular}})
	return c.Render(200, r.HTML("{{.underPlural}}/edit.html"))
}

// Update changes a {{.singular}} in the DB. This function is mapped to 
// the path PUT /{{.underPlural}}/{{"{"}}{{.singular}}}
func (v {{.modelPlural}}Resource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	err := tx.Find({{.varSingular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	// Bind {{.singular}} to the html form elements
	err = c.Bind({{.varSingular}})
	if err != nil {
		return err
	}
	verrs, err := tx.ValidateAndUpdate({{.varSingular}})
	if err != nil {
		return err
	}
	if verrs.HasAny() {
		// Make {{.varSingular}} available inside the html template
		c.Set("{{.varSingular}}", {{.varSingular}})
		// Make the errors available inside the html template
		c.Set("errors", verrs.Errors)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("{{.underPlural}}/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "{{.model}} was edited successfully")
	// and redirect to the {{.underPlural}} index page
	return c.Redirect(301, "/{{.underPlural}}")
}

// Destroy deletes a {{.singular}} from the DB. This function is mapped
// to the path DELETE /{{.underPlural}}/{{"{"}}{{.singular}}}
func (v {{.modelPlural}}Resource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty {{.model}}
	{{.varSingular}} := &models.{{.model}}{}
	// To find the {{.model}} the parameter {{.singular}}_id is used. 
	err := tx.Find({{.varSingular}}, c.Param("{{.singular}}_id"))
	if err != nil {
		return err
	}
	err = tx.Destroy({{.varSingular}})
	if err != nil {
		return err
	}
	// Redirect to the {{.underPlural}} index page
	return c.Redirect(301, "/{{.underPlural}}")
}